import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.*;

public class TicTacToeGame implements ActionListener {
	private JFrame frame = new JFrame();
	private JPanel button_panel = new JPanel();
	private JLabel textfield = new JLabel();
	private JButton[] buttons;
	private boolean player1_turn;
	private boolean singlePlayerMode; // Add single player mode
	private int boardSize;
	private Random random = new Random();

	private JButton restartButton; // Add restart button
	private JButton modeButton; // Add mode button

	public TicTacToeGame(int size, boolean singlePlayerMode) {
		this.boardSize = size;
		this.singlePlayerMode = singlePlayerMode;

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(800, 800);
		frame.getContentPane().setBackground(new Color(50, 50, 50));
		frame.setLayout(new BorderLayout());
		frame.setVisible(true);

		textfield.setBackground(new Color(25, 25, 25));
		textfield.setForeground(new Color(25, 255, 0));
		textfield.setFont(new Font("Ink Free", Font.BOLD, 75));
		textfield.setHorizontalAlignment(JLabel.CENTER);
		textfield.setText("Tic-Tac-Toe");
		textfield.setOpaque(true);

		button_panel.setLayout(new GridLayout(size, size));
		button_panel.setBackground(new Color(150, 150, 150));

		buttons = new JButton[size * size];
		for (int i = 0; i < buttons.length; i++) {
			buttons[i] = new JButton();
			button_panel.add(buttons[i]);
			buttons[i].setFont(new Font("MV Boli", Font.BOLD, 120));
			buttons[i].setFocusable(false);
			buttons[i].addActionListener(this);
		}

		restartButton = new JButton("Restart"); // Initialize restart button
		restartButton.addActionListener(e -> restartGame()); // Add ActionListener to restart button

		modeButton = new JButton("Switch Mode"); // Initialize mode button
		modeButton.addActionListener(e -> switchMode()); // Add ActionListener to mode button

		JPanel bottomPanel = new JPanel(); // Create a panel to hold the restart button and mode button
		bottomPanel.setLayout(new FlowLayout());
		bottomPanel.add(restartButton);
		bottomPanel.add(modeButton);

		frame.add(textfield, BorderLayout.NORTH);
		frame.add(button_panel, BorderLayout.CENTER);
		frame.add(bottomPanel, BorderLayout.SOUTH); // Add bottomPanel to the SOUTH of the frame

		firstTurn();
	}

	private void firstTurn() {
		player1_turn = random.nextBoolean();
		textfield.setText(player1_turn ? "X turn" : "O turn");

		// If in single player mode and it's CPU's turn, let the CPU make a move
		if (singlePlayerMode && !player1_turn) {
			makeCPUMove();
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		JButton clickedButton = (JButton) e.getSource();
		if (clickedButton.getText().isEmpty()) {
			clickedButton.setText(player1_turn ? "X" : "O");
			player1_turn = !player1_turn;
			textfield.setText(player1_turn ? "X turn" : "O turn");
			if (singlePlayerMode && !player1_turn) {
				makeCPUMove();
			}
			checkWin();
		}
	}

	private void checkWin() {
		String[][] board = new String[boardSize][boardSize];
		int index = 0;
		for (int i = 0; i < boardSize; i++) {
			for (int j = 0; j < boardSize; j++) {
				board[i][j] = buttons[index++].getText();
			}
		}

		if (checkRows(board) || checkColumns(board) || checkDiagonals(board)) {
			endGame();
		}
	}

	private boolean checkRows(String[][] board) {
		for (int i = 0; i < boardSize; i++) {
			String firstCell = board[i][0];
			boolean win = true;
			for (int j = 1; j < boardSize; j++) {
				if (!firstCell.equals(board[i][j]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(i, 0, 0, 1);
				return true;
			}
		}
		return false;
	}

	private boolean checkColumns(String[][] board) {
		for (int i = 0; i < boardSize; i++) {
			String firstCell = board[0][i];
			boolean win = true;
			for (int j = 1; j < boardSize; j++) {
				if (!firstCell.equals(board[j][i]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(0, i, 1, 0);
				return true;
			}
		}
		return false;
	}

	private boolean checkDiagonals(String[][] board) {
		String firstCell = board[0][0];
		boolean win = true;
		for (int i = 1; i < boardSize; i++) {
			if (!firstCell.equals(board[i][i]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, 0, 1, 1);
			return true;
		}

		firstCell = board[0][boardSize - 1];
		win = true;
		for (int i = 1; i < boardSize; i++) {
			if (!firstCell.equals(board[i][boardSize - i - 1]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, boardSize - 1, 1, -1);
			return true;
		}

		return false;
	}

	private void highlightWinningCells(int startRow, int startCol, int rowIncrement, int colIncrement) {
		for (int i = 0; i < boardSize; i++) {
			buttons[startRow * boardSize + startCol].setBackground(Color.GREEN);
			startRow += rowIncrement;
			startCol += colIncrement;
		}
	}

	private void endGame() {
		for (JButton button : buttons) {
			button.setEnabled(false);
		}
	}

	private void makeCPUMove() {
		ArrayList<Integer> emptyCells = new ArrayList<>();
		for (int i = 0; i < buttons.length; i++) {
			if (buttons[i].getText().isEmpty()) {
				emptyCells.add(i);
			}
		}
		if (!emptyCells.isEmpty()) {
			int randomIndex = random.nextInt(emptyCells.size());
			buttons[emptyCells.get(randomIndex)].setText("O");
		}
	}

	private void restartGame() {
		frame.dispose();
		new InitiateTicTacToeBoardSize();
	}

	private void switchMode() {
		frame.dispose();
		new InitiateTicTacToeBoardSize();
	}
}