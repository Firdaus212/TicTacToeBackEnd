import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.*;

public class TicTacToeGame implements ActionListener {
	private TicTacToeGameData data = new TicTacToeGameData(new JFrame(), new JPanel(), new JLabel(), new Random());

	public TicTacToeGame(int size, boolean singlePlayerMode) {
		this.data.boardSize = size;
		this.data.singlePlayerMode = singlePlayerMode;

		data.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		data.frame.setSize(800, 800);
		data.frame.getContentPane().setBackground(new Color(50, 50, 50));
		data.frame.setLayout(new BorderLayout());
		data.frame.setVisible(true);

		data.textfield.setBackground(new Color(25, 25, 25));
		data.textfield.setForeground(new Color(25, 255, 0));
		data.textfield.setFont(new Font("Ink Free", Font.BOLD, 75));
		data.textfield.setHorizontalAlignment(JLabel.CENTER);
		data.textfield.setText("Tic-Tac-Toe");
		data.textfield.setOpaque(true);

		data.button_panel.setLayout(new GridLayout(size, size));
		data.button_panel.setBackground(new Color(150, 150, 150));

		data.buttons = new JButton[size * size];
		for (int i = 0; i < data.buttons.length; i++) {
			data.buttons[i] = new JButton();
			data.button_panel.add(data.buttons[i]);
			data.buttons[i].setFont(new Font("MV Boli", Font.BOLD, 120));
			data.buttons[i].setFocusable(false);
			data.buttons[i].addActionListener(this);
		}

		data.restartButton = new JButton("Restart");
		data.restartButton.addActionListener(e -> restartGame());

		data.modeButton = new JButton("Switch Mode");
		data.modeButton.addActionListener(e -> switchMode());

		JPanel bottomPanel = new JPanel();
		bottomPanel.setLayout(new FlowLayout());
		bottomPanel.add(data.restartButton);
		bottomPanel.add(data.modeButton);

		data.frame.add(data.textfield, BorderLayout.NORTH);
		data.frame.add(data.button_panel, BorderLayout.CENTER);
		data.frame.add(bottomPanel, BorderLayout.SOUTH);

		firstTurn();
	}

	private void firstTurn() {
		data.player1_turn = data.random.nextBoolean();
		data.textfield.setText(data.player1_turn ? "X turn" : "O turn");

		if (data.singlePlayerMode && !data.player1_turn) {
			makeCPUMove();
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		JButton clickedButton = (JButton) e.getSource();
		if (clickedButton.getText().isEmpty()) {
			clickedButton.setText(data.player1_turn ? "X" : "O");
			data.player1_turn = !data.player1_turn;
			data.textfield.setText(data.player1_turn ? "X turn" : "O turn");

			if (data.singlePlayerMode && !data.player1_turn) {
				makeCPUMove();
			}

			checkWin();
			checkDraw();
		}
	}

	private void checkWin() {
		String[][] board = new String[data.boardSize][data.boardSize];
		int index = 0;
		for (int i = 0; i < data.boardSize; i++) {
			for (int j = 0; j < data.boardSize; j++) {
				board[i][j] = data.buttons[index++].getText();
			}
		}

		if (checkRows(board) || checkColumns(board) || checkDiagonals(board)) {
			endGame();
		}
	}

	private boolean checkRows(String[][] board) {
		for (int i = 0; i < data.boardSize; i++) {
			String firstCell = board[i][0];
			boolean win = true;
			for (int j = 1; j < data.boardSize; j++) {
				if (!firstCell.equals(board[i][j]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(i, 0, 0, 1);
				return true;
			}
		}
		return false;
	}

	private boolean checkColumns(String[][] board) {
		for (int i = 0; i < data.boardSize; i++) {
			String firstCell = board[0][i];
			boolean win = true;
			for (int j = 1; j < data.boardSize; j++) {
				if (!firstCell.equals(board[j][i]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(0, i, 1, 0);
				return true;
			}
		}
		return false;
	}

	private boolean checkDiagonals(String[][] board) {
		String firstCell = board[0][0];
		boolean win = true;
		for (int i = 1; i < data.boardSize; i++) {
			if (!firstCell.equals(board[i][i]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, 0, 1, 1);
			return true;
		}

		firstCell = board[0][data.boardSize - 1];
		win = true;
		for (int i = 1; i < data.boardSize; i++) {
			if (!firstCell.equals(board[i][data.boardSize - i - 1]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, data.boardSize - 1, 1, -1);
			return true;
		}

		return false;
	}

	private void highlightWinningCells(int startRow, int startCol, int rowIncrement, int colIncrement) {
		for (int i = 0; i < data.boardSize; i++) {
			data.buttons[startRow * data.boardSize + startCol].setBackground(Color.GREEN);
			startRow += rowIncrement;
			startCol += colIncrement;
		}
	}

	private void endGame() {
		for (JButton button : data.buttons) {
			button.setEnabled(false);
		}
	}

	private void makeCPUMove() {
		ArrayList<Integer> emptyCells = new ArrayList<>();
		for (int i = 0; i < data.buttons.length; i++) {
			if (data.buttons[i].getText().isEmpty()) {
				emptyCells.add(i);
			}
		}
		if (!emptyCells.isEmpty()) {
			int randomIndex = data.random.nextInt(emptyCells.size());
			data.buttons[emptyCells.get(randomIndex)].setText("O");
		}
	}

	private void checkDraw() {
		boolean isBoardFull = true;
		for (JButton button : data.buttons) {
			if (button.getText().isEmpty()) {
				isBoardFull = false;
				break;
			}
		}
		if (isBoardFull) {
			JOptionPane.showMessageDialog(data.frame, "The game is a draw! Would you like to play again?");
			restartGame();
		}
	}

	private void restartGame() {
		data.frame.dispose();
		new GameInitializer();
	}

	private void switchMode() {
		data.frame.dispose();
		new GameInitializer();
	}
}