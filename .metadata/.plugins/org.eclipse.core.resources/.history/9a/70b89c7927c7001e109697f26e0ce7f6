import java.awt.Color;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class CheckTheResult {
	public JFrame frame;
	public JPanel button_panel;
	public JLabel textfield;
	public JButton[] buttons;
	public boolean player1_turn;
	public boolean singlePlayerMode;
	public int boardSize;
	public Random random;
	public JButton restartButton;
	public JButton modeButton;

	public CheckTheResult(JFrame frame, JPanel button_panel, JLabel textfield, Random random) {
		this.frame = frame;
		this.button_panel = button_panel;
		this.textfield = textfield;
		this.random = random;
	}
	
	private void checkWin() {
		String[][] board = new String[data.boardSize][data.boardSize];
		int index = 0;
		for (int i = 0; i < data.boardSize; i++) {
			for (int j = 0; j < data.boardSize; j++) {
				board[i][j] = data.buttons[index++].getText();
			}
		}

		if (checkRows(board) || checkColumns(board) || checkDiagonals(board)) {
			endGame();
		}
	}

	private boolean checkRows(String[][] board) {
		for (int i = 0; i < data.boardSize; i++) {
			String firstCell = board[i][0];
			boolean win = true;
			for (int j = 1; j < data.boardSize; j++) {
				if (!firstCell.equals(board[i][j]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(i, 0, 0, 1);
				return true;
			}
		}
		return false;
	}

	private boolean checkColumns(String[][] board) {
		for (int i = 0; i < data.boardSize; i++) {
			String firstCell = board[0][i];
			boolean win = true;
			for (int j = 1; j < data.boardSize; j++) {
				if (!firstCell.equals(board[j][i]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(0, i, 1, 0);
				return true;
			}
		}
		return false;
	}

	private boolean checkDiagonals(String[][] board) {
		String firstCell = board[0][0];
		boolean win = true;
		for (int i = 1; i < data.boardSize; i++) {
			if (!firstCell.equals(board[i][i]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, 0, 1, 1);
			return true;
		}

		firstCell = board[0][data.boardSize - 1];
		win = true;
		for (int i = 1; i < data.boardSize; i++) {
			if (!firstCell.equals(board[i][data.boardSize - i - 1]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, data.boardSize - 1, 1, -1);
			return true;
		}

		return false;
	}

	private void highlightWinningCells(int startRow, int startCol, int rowIncrement, int colIncrement) {
		for (int i = 0; i < data.boardSize; i++) {
			data.buttons[startRow * data.boardSize + startCol].setBackground(Color.GREEN);
			startRow += rowIncrement;
			startCol += colIncrement;
		}
	}

	private void endGame() {
		for (JButton button : data.buttons) {
			button.setEnabled(false);
		}
	}
}