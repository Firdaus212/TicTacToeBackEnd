
public class CheckTheWinner(int boardSize) {
	public void checkWin() {
		String[][] board = new String[boardSize][boardSize];
		int index = 0;
		for (int i = 0; i < boardSize; i++) {
			for (int j = 0; j < boardSize; j++) {
				board[i][j] = buttons[index++].getText();
			}
		}

		if (checkRows(board) || checkColumns(board) || checkDiagonals(board)) {
			endGame();
		}
	}

	private boolean checkRows(String[][] board) {
		for (int i = 0; i < boardSize; i++) {
			String firstCell = board[i][0];
			boolean win = true;
			for (int j = 1; j < boardSize; j++) {
				if (!firstCell.equals(board[i][j]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(i, 0, 0, 1);
				return true;
			}
		}
		return false;
	}

	private boolean checkColumns(String[][] board) {
		for (int i = 0; i < boardSize; i++) {
			String firstCell = board[0][i];
			boolean win = true;
			for (int j = 1; j < boardSize; j++) {
				if (!firstCell.equals(board[j][i]) || firstCell.isEmpty()) {
					win = false;
					break;
				}
			}
			if (win) {
				highlightWinningCells(0, i, 1, 0);
				return true;
			}
		}
		return false;
	}

	private boolean checkDiagonals(String[][] board) {
		String firstCell = board[0][0];
		boolean win = true;
		for (int i = 1; i < boardSize; i++) {
			if (!firstCell.equals(board[i][i]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, 0, 1, 1);
			return true;
		}

		firstCell = board[0][boardSize - 1];
		win = true;
		for (int i = 1; i < boardSize; i++) {
			if (!firstCell.equals(board[i][boardSize - i - 1]) || firstCell.isEmpty()) {
				win = false;
				break;
			}
		}
		if (win) {
			highlightWinningCells(0, boardSize - 1, 1, -1);
			return true;
		}

		return false;
	}

}
