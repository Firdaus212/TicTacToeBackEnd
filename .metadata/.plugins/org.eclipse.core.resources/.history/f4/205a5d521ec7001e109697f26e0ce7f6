import java.awt.*;
import java.awt.event.*;
import java.util.Random;

import javax.swing.*;

public class TicTacToeGame implements ActionListener {
	private JFrame frame = new JFrame();
    private JPanel button_panel = new JPanel();
    private JLabel textfield = new JLabel();
    private JButton[] buttons;
    private boolean player1_turn;
    private int boardSize;
    private Random random = new Random();

    private JButton restartButton; // Add restart button

    public TicTacToeGame(int size) {
        this.boardSize = size;

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 800);
        frame.getContentPane().setBackground(new Color(50, 50, 50));
        frame.setLayout(new BorderLayout());
        frame.setVisible(true);

        textfield.setBackground(new Color(25, 25, 25));
        textfield.setForeground(new Color(25, 255, 0));
        textfield.setFont(new Font("Ink Free", Font.BOLD, 75));
        textfield.setHorizontalAlignment(JLabel.CENTER);
        textfield.setText("Tic-Tac-Toe");
        textfield.setOpaque(true);

        button_panel.setLayout(new GridLayout(size, size));
        button_panel.setBackground(new Color(150, 150, 150));

        buttons = new JButton[size * size];
        for (int i = 0; i < buttons.length; i++) {
            buttons[i] = new JButton();
            button_panel.add(buttons[i]);
            buttons[i].setFont(new Font("MV Boli", Font.BOLD, 120));
            buttons[i].setFocusable(false);
            buttons[i].addActionListener(this);
        }

        restartButton = new JButton("Restart"); // Initialize restart button
        restartButton.addActionListener(e -> restartGame()); // Add ActionListener to restart button

        JPanel bottomPanel = new JPanel(); // Create a panel to hold the restart button
        bottomPanel.setLayout(new FlowLayout());
        bottomPanel.add(restartButton);

        frame.add(textfield, BorderLayout.NORTH);
        frame.add(button_panel, BorderLayout.CENTER);
        frame.add(bottomPanel, BorderLayout.SOUTH); // Add bottomPanel to the SOUTH of the frame

        firstTurn();
    }

    private void firstTurn() {
        player1_turn = random.nextBoolean();
        textfield.setText(player1_turn ? "X turn" : "O turn");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton clickedButton = (JButton) e.getSource();
        if (clickedButton.getText().isEmpty()) {
            if (player1_turn) {
                clickedButton.setText("X");
            } else {
                clickedButton.setText("O");
            }
            player1_turn = !player1_turn;
            textfield.setText(player1_turn ? "X turn" : "O turn");
            checkWin();
        }
    }

    private void checkWin() {
        String[][] board = new String[boardSize][boardSize];
        int index = 0;
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                board[i][j] = buttons[index++].getText();
            }
        }

        if (checkRows(board) || checkColumns(board) || checkDiagonals(board)) {
            endGame();
        }
    }

    private boolean checkRows(String[][] board) {
        for (int i = 0; i < boardSize; i++) {
            String firstCell = board[i][0];
            boolean win = true;
            for (int j = 1; j < boardSize; j++) {
                if (!firstCell.equals(board[i][j]) || firstCell.isEmpty()) {
                    win = false;
                    break;
                }
            }
            if (win) {
                highlightWinningCells(i, 0, 0, 1);
                return true;
            }
        }
        return false;
    }

    private boolean checkColumns(String[][] board) {
        for (int i = 0; i < boardSize; i++) {
            String firstCell = board[0][i];
            boolean win = true;
            for (int j = 1; j < boardSize; j++) {
                if (!firstCell.equals(board[j][i]) || firstCell.isEmpty()) {
                    win = false;
                    break;
                }
            }
            if (win) {
                highlightWinningCells(0, i, 1, 0);
                return true;
            }
        }
        return false;
    }

    private boolean checkDiagonals(String[][] board) {
        String firstCell = board[0][0];
        boolean win = true;
        for (int i = 1; i < boardSize; i++) {
            if (!firstCell.equals(board[i][i]) || firstCell.isEmpty()) {
                win = false;
                break;
            }
        }
        if (win) {
            highlightWinningCells(0, 0, 1, 1);
            return true;
        }

        firstCell = board[0][boardSize - 1];
        win = true;
        for (int i = 1; i < boardSize; i++) {
            if (!firstCell.equals(board[i][boardSize - i - 1]) || firstCell.isEmpty()) {
                win = false;
                break;
            }
        }
        if (win) {
            highlightWinningCells(0, boardSize - 1, 1, -1);
            return true;
        }

        return false;
    }

    private void highlightWinningCells(int startRow, int startCol, int rowIncrement, int colIncrement) {
        for (int i = 0; i < boardSize; i++) {
            buttons[startRow * boardSize + startCol].setBackground(Color.GREEN);
            startRow += rowIncrement;
            startCol += colIncrement;
        }
    }

    private void endGame() {
        for (JButton button : buttons) {
            button.setEnabled(false);
        }
    }
    
    private void restartGame() {
        frame.dispose(); // Close the current frame
        new TicTacToeGame(boardSize); // Start a new game with the same board size
    }
}